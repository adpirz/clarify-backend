# -*- coding: utf-8 -*-
# Generated by Django 1.11.12 on 2018-04-16 22:33
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AttendanceDailyRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source_object_id', models.PositiveIntegerField(unique=True)),
                ('date', models.DateField()),
                ('attendance_flag', models.CharField(choices=[('X', 'Not Enrolled'), ('N', 'School Closed'), ('+', 'Present'), ('L', 'Excused tardy'), ('M', 'Unexcused Tardy'), ('R', 'Early Release'), ('E', 'Excused'), ('T', 'Tardy'), ('U', 'Unexcused'), ('Y', 'T30'), ('I', 'Independent Study Complete'), ('-', 'Independent Study Pending'), ('_', 'Independent Study NOT-Complete'), ('A', 'Absent'), ('D', 'Delete')], max_length=1)),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source_object_id', models.PositiveIntegerField(unique=True)),
                ('category_name', models.CharField(max_length=255)),
                ('icon', models.CharField(max_length=255)),
                ('weight', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CategoryScoreCache',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source_object_id', models.PositiveIntegerField(unique=True)),
                ('possible_points', models.FloatField()),
                ('points_earned', models.FloatField()),
                ('percentage', models.FloatField()),
                ('category_name', models.CharField(max_length=255)),
                ('mark', models.CharField(max_length=255)),
                ('assignment_count', models.IntegerField()),
                ('calculated_at', models.DateTimeField()),
                ('timeframe_start_date', models.DateField()),
                ('timeframe_end_date', models.DateField()),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sis_pull.Category')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CategoryType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source_object_id', models.PositiveIntegerField(unique=True)),
                ('category_type_name', models.CharField(max_length=255)),
                ('is_academic', models.BooleanField(default=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source_object_id', models.PositiveIntegerField(unique=True)),
                ('short_name', models.CharField(max_length=30)),
                ('long_name', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('school_course_id', models.CharField(max_length=20)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Gradebook',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source_object_id', models.PositiveIntegerField(unique=True)),
                ('created_on', models.DateTimeField()),
                ('gradebook_name', models.CharField(max_length=255)),
                ('active', models.BooleanField(default=True)),
                ('academic_year', models.PositiveIntegerField()),
                ('is_deleted', models.BooleanField(default=False)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GradebookSectionCourseAffinity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source_object_id', models.PositiveIntegerField(unique=True)),
                ('created', models.DateTimeField()),
                ('modified', models.DateTimeField()),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sis_pull.Course')),
                ('gradebook', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sis_pull.Gradebook')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GradeLevel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source_object_id', models.PositiveIntegerField(unique=True)),
                ('sort_order', models.IntegerField()),
                ('short_name', models.CharField(max_length=255)),
                ('long_name', models.CharField(max_length=255)),
                ('state_id', models.CharField(max_length=455, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OverallScoreCache',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source_object_id', models.PositiveIntegerField(unique=True)),
                ('possible_points', models.FloatField()),
                ('points_earned', models.FloatField()),
                ('percentage', models.FloatField()),
                ('mark', models.CharField(max_length=255)),
                ('missing_count', models.IntegerField()),
                ('zero_count', models.IntegerField()),
                ('excused_count', models.IntegerField()),
                ('gradebook', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sis_pull.Gradebook')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Section',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source_object_id', models.PositiveIntegerField(unique=True)),
                ('section_name', models.CharField(max_length=255)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SectionLevelRosterPerYear',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source_object_id', models.PositiveIntegerField(unique=True)),
                ('academic_year', models.PositiveIntegerField()),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sis_pull.Course')),
                ('grade_level', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sis_pull.GradeLevel')),
                ('section', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sis_pull.Section')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Site',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source_object_id', models.PositiveIntegerField(unique=True)),
                ('site_name', models.CharField(max_length=255)),
                ('site_type_id', models.IntegerField(choices=[(1, 'Middle and K-8 Schools'), (2, 'High Schools'), (3, 'Continuation schools'), (4, 'Pre-schools'), (5, 'Adult Education Facilities'), (6, 'Special Education Facilities'), (7, 'Other Schools and Facilities'), (9, 'Elementary Schools'), (10, 'Closed')])),
                ('address', models.CharField(max_length=255)),
                ('phone1', models.CharField(max_length=100)),
                ('phone2', models.CharField(max_length=100)),
                ('city', models.CharField(max_length=255)),
                ('state', models.CharField(max_length=100)),
                ('zip', models.CharField(max_length=10)),
                ('end_grade_level', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='end_grade_level', to='sis_pull.GradeLevel')),
                ('start_grade_level', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='start_grade_level', to='sis_pull.GradeLevel')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Staff',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source_object_id', models.PositiveIntegerField(unique=True)),
                ('prefix', models.CharField(choices=[('MR', 'Mr.'), ('MS', 'Ms.'), ('MRS', 'Mrs.')], default='MS', max_length=3)),
                ('gender', models.CharField(blank=True, choices=[('M', 'Male'), ('F', 'Female')], max_length=1, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'staff',
                'verbose_name_plural': 'staff',
            },
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source_object_id', models.PositiveIntegerField(unique=True)),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('ethnicity', models.IntegerField(choices=[(146, 'Refused to Identify'), (141, 'Filipino'), (144, 'White'), (134, 'Other Asian'), (133, 'Cambodian'), (132, 'Laotian'), (131, 'Asian Indian'), (130, 'Vietnamese'), (129, 'Korean'), (128, 'Japanese'), (127, 'Chinese'), (145, 'Hmong'), (125, 'American Indian Or Alaska Native'), (140, 'Other Pacific Islander'), (139, 'Tahitian'), (138, 'Samoan'), (137, 'Guamanian'), (136, 'Hawaiian'), (143, 'Black or African American')], null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='sectionlevelrosterperyear',
            name='site',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sis_pull.Site'),
        ),
        migrations.AddField(
            model_name='sectionlevelrosterperyear',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sis_pull.Staff'),
        ),
        migrations.AddField(
            model_name='overallscorecache',
            name='student',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sis_pull.Student'),
        ),
        migrations.AddField(
            model_name='gradebooksectioncourseaffinity',
            name='section',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sis_pull.Section'),
        ),
        migrations.AddField(
            model_name='gradebooksectioncourseaffinity',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sis_pull.Staff'),
        ),
        migrations.AddField(
            model_name='gradebook',
            name='created_by',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sis_pull.Staff'),
        ),
        migrations.AddField(
            model_name='course',
            name='site_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sis_pull.Site'),
        ),
        migrations.AddField(
            model_name='categoryscorecache',
            name='gradebook',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sis_pull.Gradebook'),
        ),
        migrations.AddField(
            model_name='categoryscorecache',
            name='student',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sis_pull.Student'),
        ),
        migrations.AddField(
            model_name='category',
            name='category_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sis_pull.CategoryType'),
        ),
        migrations.AddField(
            model_name='category',
            name='gradebook',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sis_pull.Gradebook'),
        ),
        migrations.AddField(
            model_name='attendancedailyrecord',
            name='site',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sis_pull.Site'),
        ),
        migrations.AddField(
            model_name='attendancedailyrecord',
            name='student',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sis_pull.Student'),
        ),
        migrations.AlterUniqueTogether(
            name='attendancedailyrecord',
            unique_together=set([('date', 'student')]),
        ),
    ]
